<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
  <link rel="stylesheet" href="/css/dashboard.css">
</head>

<body>
  <div class="container">
    <h2>Welcome to the Dashboard Page</h2>
    <div class="logout-container">
      <button class="logout-button" onclick="logout()">Logout</button>
  </div>

    <section>
      <h3>Categories</h3>
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% categories.forEach(category => { %>
            <tr>
              <td><strong><%= category.name %></strong></td>
              <td><%= category.description %></td>
              <td>
                <button onclick="showUpdateCategoryPopup('<%= category._id %>', '<%= category.description %>')">Update</button>
                <button onclick="deleteCategory('<%= category._id %>')">Delete</button>
                <button onclick="showAddProductPopup('<%= category._id %>')">Add Product</button>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </section>

    <section>
      <h3>Create New Category</h3>
      <form id="createCategoryForm">
        <input type="text" id="categoryName" placeholder="Category Name" required>
        <input type="text" id="categoryDescription" placeholder="Category Description" required>
        <button type="submit">Create Category</button>
      </form>
    </section>
    
    <section>
      <h3>Products</h3>
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Category</th>
            <th>Description</th>
            <th>Price</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% products.forEach(product => { %>
            <tr>
              <td><strong><%= product.name %></strong></td>
              <td><em><%= product.category_id.name %></em></td>
              <td><%= product.description %></td>
              <td><%= product.price %></td>
              <td>
                <button onclick="showUpdateProductPopup('<%= product._id %>', '<%= product.description %>', '<%= product.price %>')">Update</button>
                <button onclick="deleteProduct('<%= product._id %>')">Delete</button>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </section>
    
  </div>

  <!-- Add Product Popup -->
  <div id="addProductPopup" class="popup" style="display:none">
    <h3>Add New Product</h3>
    <input type="text" id="productName" class="input-field" placeholder="Product Name" required>
    <input type="text" id="productDescription" class="input-field" placeholder="Product Description" required>
    <input type="number" id="productPrice"class="input-field" placeholder="Product Price" min=0 max=100000000 required>
    <input type="hidden" id="productCategoryId">
    <button onclick="createProduct()">Add Product</button>
    <button onclick="closeAddProductPopup()">Cancel</button>
  </div>

  <!-- Update Category Popup -->
  <div id="updateCategoryPopup"class="popup" style="display:none">
    <h3>Update Category</h3>
    <input type="text" id="updateCategoryDescription"class="input-field" placeholder="Category Description" required>
    <input type="hidden" id="updateCategoryId">
    <button onclick="updateCategory()">Update Category</button>
    <button onclick="closeUpdateCategoryPopup()">Cancel</button>
  </div>

  <!-- Update Product Popup -->
  <div id="updateProductPopup" class="popup" style="display:none">
    <h3>Update Product</h3>
    <input type="text" id="updateProductDescription"class="input-field" placeholder="Product Description" required>
    <input type="number" id="updateProductPrice"class="input-field" placeholder="Product Price" min=0 max=100000000 required>
    <input type="hidden" id="updateProductId">
    <button onclick="updateProduct()">Update Product</button>
    <button onclick="closeUpdateProductPopup()">Cancel</button>
  </div>

  <script>
    // Get the token from localStorage
    const token = localStorage.getItem('token');
    console.log('Token:', token);

    function showAddProductPopup(categoryId) {
      document.getElementById('productCategoryId').value = categoryId;
      document.getElementById('addProductPopup').style.display = 'block';
      document.getElementById('overlay').style.display = 'block';
    }

    function closeAddProductPopup() {
      document.getElementById('addProductPopup').style.display = 'none';
      document.getElementById('overlay').style.display = 'none';
    }

    function showUpdateCategoryPopup(categoryId, description) {
      document.getElementById('updateCategoryId').value = categoryId;
      document.getElementById('updateCategoryDescription').value = description;
      document.getElementById('updateCategoryPopup').style.display = 'block';
    }

    function closeUpdateCategoryPopup() {
      document.getElementById('updateCategoryPopup').style.display = 'none';
    }

    function updateCategory() {
      const categoryId = document.getElementById('updateCategoryId').value;
      const newDescription = document.getElementById('updateCategoryDescription').value;

      fetch(`/api/category/${categoryId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,  // Send token with the request
        },
        body: JSON.stringify({ description: newDescription })
      })
      .then(response => response.json())
      .then(result => {
        if (result.status) {
          alert('Category updated successfully!');
          window.location.reload();  // Reload the page to see the updated category
        } else {
          alert(result.message);
        }
      })
      .catch(error => {
        alert('Error updating category');
      });

      closeUpdateCategoryPopup();
    }

    function showUpdateProductPopup(productId, description, price) {
      document.getElementById('updateProductId').value = productId;
      document.getElementById('updateProductDescription').value = description;
      document.getElementById('updateProductPrice').value = price;
      document.getElementById('updateProductPopup').style.display = 'block';
    }

    function closeUpdateProductPopup() {
      document.getElementById('updateProductPopup').style.display = 'none';
    }

    function updateProduct() {
  const productId = document.getElementById('updateProductId').value;
  const newDescription = document.getElementById('updateProductDescription').value;
  const newPrice = document.getElementById('updateProductPrice').value;

  if (newPrice < 0) {
    alert('Price cannot be negative.');
    return;  
  }

  fetch(`/api/product/${productId}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`  // Send token with the request
    },
    body: JSON.stringify({ description: newDescription, price: newPrice })
  })
  .then(response => response.json())
  .then(result => {
    if (result.status) {
      alert('Product updated successfully!');
      window.location.reload();  // Reload the page to see the updated product
    } else {
      alert(result.message);
    }
  })
  .catch(error => {
    alert('Error updating product');
  });

  closeUpdateProductPopup();
}
    // Function to delete a category
    function deleteCategory(categoryId) {
      if (confirm('Are you sure you want to delete this category?')) {
        fetch(`/api/category/${categoryId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`  // Send token with the request
          }
        })
        .then(response => response.json())
        .then(result => {
          if (result.status) {
            alert('Category deleted successfully!');
            window.location.reload();  // Reload the page to remove the deleted category
          } else {
            alert(result.message);
          }
        })
        .catch(error => {
          alert('Error deleting category');
        });
      }
    }

    // Function to delete a product
    function deleteProduct(productId) {
      if (confirm('Are you sure you want to delete this product?')) {
        fetch(`/api/product/${productId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`  // Send token with the request
          }
        })
        .then(response => response.json())
        .then(result => {
          if (result.status) {
            alert('Product deleted successfully!');
            window.location.reload();  // Reload the page to remove the deleted product
          } else {
            alert(result.message);
          }
        })
        .catch(error => {
          alert('Error deleting product');
        });
      }
    }

    document.getElementById('createCategoryForm').addEventListener('submit', function(event) {
      event.preventDefault(); // tránh form reload lại trang

      const categoryName = document.getElementById('categoryName').value;
      const categoryDescription = document.getElementById('categoryDescription').value;

      if (categoryName && categoryDescription) {
        fetch('/api/category/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`  // Send token with the request
          },
          body: JSON.stringify({ name: categoryName, description: categoryDescription })
        })
        .then(response => response.json())
        .then(result => {
          if (result.status) {
            alert('Category created successfully!');
            window.location.reload();  // Reload the page to show the new category
          } else {
            alert(result.message);
          }
        })
        .catch(error => {
          alert('Error creating category', error);
        });
      } else {
        alert('Please fill out all fields');
      }
    });

    function logout() {
      // Remove the token from localStorage
      localStorage.removeItem('token');

      // Debug log to check if the token is removed
      console.log('Token removed:', localStorage.getItem('token'));

      // Redirect to the home page (or any other page you want)
      window.location.href = '/';
    }

    function createProduct() {
  const productName = document.getElementById('productName').value;
  const productDescription = document.getElementById('productDescription').value;
  const productPrice = document.getElementById('productPrice').value;
  const categoryId = document.getElementById('productCategoryId').value;

  if (productPrice < 0) {
    alert('Price cannot be negative.');
    return;  // Ngừng quá trình nếu giá không hợp lệ
  }

  fetch('/api/product/create', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`  // Send token with the request
    },
    body: JSON.stringify({ name: productName, description: productDescription, price: productPrice, category_id: categoryId })
  })
  .then(response => response.json())
  .then(result => {
    if (result.status) {
      alert('Product created successfully!');
      window.location.reload();  // Reload the page to show the new product
    } else {
      alert(result.message);
    }
  })
  .catch(error => {
    alert('Error creating product', error);
  });

  closeAddProductPopup();
}
</script>
</body>
</html>
